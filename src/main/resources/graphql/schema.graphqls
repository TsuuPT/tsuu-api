type Fansub {
  id: ID!
  slug: String!
  name: String!
  description(asHTML: Boolean = true): String
  media: FansubMedia!
  links: [FansubLink]!
  members: [FansubMember]!
  releases: [Release]!
  revisions(onlyPending: Boolean = true, onlyMine: Boolean = false): [FansubRevision]
}

input FansubInput {
  id: ID!
  name: String!
  description: String
#  media: FansubMediaInput! # TODO: update the DTO/model with this new entity
  links: [FansubLinkInput]!
  members: [FansubMemberInput]!
}


type FansubMedia {
  icon: Image
  banner: Image
}

input FansubMediaInput {
  icon: ImageInput
  banner: ImageInput
}


type FansubLink {
  link: String!
  type: LinkType!
}

input FansubLinkInput {
  link: String!
  type: LinkType!
}


type FansubMember {
  name: String!
  role: String
  contact: String
  contactType: LinkType
}

input FansubMemberInput {
  name: String!
  role: String
  contact: String
  contactType: LinkType
}


type FansubRevision {
  id: ID!
  fansub: Fansub!
  createdBy: Int! # TODO: change type to User
  createdAt: String!
  reviewedBy: Int # TODO: change type to User
  reviewedAt: String
  status: RevisionStatus!
  comment: String
}


type Media {
  id: ID!
  slug: String!
  title: MediaTitle!
  type: MediaType!
  cover: Image
  description(asHTML: Boolean = true): String
}


type MediaTitle {
  default: String,
  portuguese: String,
  english: String,
  romanji: String,
  original: String,
}


enum MediaType {
  ANIME
  MANGA
  NOVEL
}

enum LinkType {
  WEBSITE
  EMAIL
  FACEBOOK
  TWITTER
  INSTAGRAM
  DISCORD
  YOUTUBE
  SKYPE
}

enum RevisionStatus {
  PENDING
  APPROVED
  REJECTED
}


type Release {
  id: ID!
  fansub: Fansub!
  media: Media!
  name: String
  timestamp: String
}


type Image {
  small: String
  medium: String
  large: String
}

input ImageInput {
  small: String
  medium: String
  large: String
}


type Query {
  fansubs: [Fansub]
  fansub(slug: String!): Fansub

  medias: [Media]!
  media(id: String!): Media

  releases(fansubId: ID!): [Release]!
  release(id: ID!): Release
}


type Mutation {
  approveFansubRevision(revisionId: ID): String
  rejectFansubRevision(revisionId: ID, reason: String): String
  saveFansubRevision(revisionId: ID, fansub: FansubInput!): FansubRevision
}


schema {
  query: Query
  mutation: Mutation
}